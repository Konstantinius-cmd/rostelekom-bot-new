import os
import asyncio
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è Render)
TOKEN = os.getenv("TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

GETTING_DATA = range(1)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —É—Å–ª—É–≥", callback_data="connect")],
        [
            InlineKeyboardButton("üîÑ –°–º–µ–Ω–∞ —Ç–∞—Ä–∏—Ñ–∞", callback_data="change"),
            InlineKeyboardButton("‚ö†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏", callback_data="support"),
        ],
    ]
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –†–æ—Å—Ç–µ–ª–µ–∫–æ–º.\n–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action = query.data

    if action == "connect":
        await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è, –∞–¥—Ä–µ—Å –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        return GETTING_DATA

    elif action == "change":
        await query.message.reply_text("üìû –î–ª—è —Å–º–µ–Ω—ã —Ç–∞—Ä–∏—Ñ–∞ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ: 8-800-100-08-00")
    elif action == "support":
        await query.message.reply_text(
            "‚öôÔ∏è –î–ª—è —Ä–µ—à–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å:\n"
            "üìû 8-800-100-08-00\nüåê https://rt.ru/support"
        )

    return ConversationHandler.END

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_user_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = update.message.text
    await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.")
    try:
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üì¨ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n{user_data}"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É: {e}")
    return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥–∞ /cancel
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            GETTING_DATA: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_user_data)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv)
    app.add_handler(CallbackQueryHandler(button_handler))

    print("‚úÖ –ù–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())
